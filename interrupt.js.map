{"version":3,"sources":["interrupt.js","interrupt.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACCA;IAGE,mBAAmB,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;IAAG,CAAC;IAM9C,6BAAS,GAAT,UAAU,EAAiC;QACzC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAKD,+BAAW,GAAX;QACE,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IAClB,CAAC;IAKD,0BAAM,GAAN,cAAiB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAKxC,yBAAK,GAAL,cAAgB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACzC,gBAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,iBAAS,YA8BrB,CAAA","file":"interrupt.js","sourcesContent":["\"use strict\";\r\nvar Interrupt = (function () {\r\n    function Interrupt(source) {\r\n        this.source = source;\r\n    }\r\n    Interrupt.prototype.subscribe = function (fn) {\r\n        this.sub = this.source.onInterrupt.subscribe(fn);\r\n    };\r\n    Interrupt.prototype.unsubscribe = function () {\r\n        this.sub.unsubscribe();\r\n        this.sub = null;\r\n    };\r\n    Interrupt.prototype.resume = function () { this.source.attach(); };\r\n    Interrupt.prototype.pause = function () { this.source.detach(); };\r\n    return Interrupt;\r\n}());\r\nexports.Interrupt = Interrupt;\r\n//# sourceMappingURL=interrupt.js.map","import {Subscription} from 'rxjs/Rx';\n\nimport {InterruptArgs} from './interruptargs';\nimport {InterruptSource} from './interruptsource';\n\n/*\n * A class for managing an interrupt from an interrupt source.\n */\nexport class Interrupt {\n  private sub: Subscription;\n\n  constructor(public source: InterruptSource) {}\n\n  /*\n   * Subscribes to the interrupt using the specified function.\n   * @param fn - The subscription function.\n   */\n  subscribe(fn: (args: InterruptArgs) => void): void {\n    this.sub = this.source.onInterrupt.subscribe(fn);\n  }\n\n  /*\n   * Unsubscribes the interrupt.\n   */\n  unsubscribe(): void {\n    this.sub.unsubscribe();\n    this.sub = null;\n  }\n\n  /*\n   * Keeps the subscription but resumes interrupt events.\n   */\n  resume(): void { this.source.attach(); }\n\n  /*\n   * Keeps the subscription but pauses interrupt events.\n   */\n  pause(): void { this.source.detach(); }\n}\n"],"sourceRoot":"/source/"}