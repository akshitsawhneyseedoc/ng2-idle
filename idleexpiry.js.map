{"version":3,"sources":["idleexpiry.js","idleexpiry.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACJA;IAGE;QAAgB,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;IAAC,CAAC;IAO5C,uBAAE,GAAF,UAAG,KAAW;QACZ,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAaD,wBAAG,GAAH,cAAc,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;IAMlC,8BAAS,GAAT;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;IAChD,CAAC;IACH,iBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CqB,kBAAU,aA2C/B,CAAA","file":"idleexpiry.js","sourcesContent":["\"use strict\";\r\nvar IdleExpiry = (function () {\r\n    function IdleExpiry() {\r\n        this.idValue = new Date();\r\n    }\r\n    IdleExpiry.prototype.id = function (value) {\r\n        if (value !== void 0) {\r\n            if (!value) {\r\n                throw new Error('A value must be specified for the ID.');\r\n            }\r\n            this.idValue = value;\r\n        }\r\n        return this.idValue;\r\n    };\r\n    IdleExpiry.prototype.now = function () { return new Date(); };\r\n    IdleExpiry.prototype.isExpired = function () {\r\n        var expiry = this.last();\r\n        return expiry != null && expiry <= this.now();\r\n    };\r\n    return IdleExpiry;\r\n}());\r\nexports.IdleExpiry = IdleExpiry;\r\n//# sourceMappingURL=idleexpiry.js.map","/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nexport abstract class IdleExpiry {\n  protected idValue: any;\n\n  constructor() { this.idValue = new Date(); }\n\n  /*\n   * Gets or sets a unique ID for the window\n   * @param id - The id.\n   * @return The current id.\n   */\n  id(value?: any): any {\n    if (value !== void 0) {\n      if (!value) {\n        throw new Error('A value must be specified for the ID.');\n      }\n\n      this.idValue = value;\n    }\n\n    return this.idValue;\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The value to set.\n   * @return The last expiry value.\n   */\n  abstract last(value?: Date): Date;\n\n  /*\n   * Returns the current Date.\n   * @return The current Date.\n   */\n  now(): Date { return new Date(); }\n\n  /*\n   * Returns whether or not it is expired.\n   * @return True if expired; otherwise, false.\n   */\n  isExpired(): boolean {\n    let expiry = this.last();\n    return expiry != null && expiry <= this.now();\n  }\n}\n"],"sourceRoot":"/source/"}